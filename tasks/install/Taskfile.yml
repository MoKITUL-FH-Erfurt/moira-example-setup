version: '3'

tasks:
  copy-plugins:
    desc: Copy all MoKITUL plugins into the correct Moodle directories
    vars:
      moodle_container_id:
        sh: docker ps --filter "ancestor=docker.io/bitnami/moodle:4.3.5" -q

    cmds:
      - |
        container_id=$(docker ps --filter "ancestor=bitnami/moodle" -q)
        echo "Copying plugins into the Moodle container..."

        # Define a reusable function to determine the plugin destination and type
        determine_destination_and_name() {
          local repo_name="$1"
          local plugin_name
          local destination
          local type
          
          if [[ "$repo_name" == "mokitul-core-plugin" ]]; then
            # Special case for core plugin - install as local/core
            type="local"
            plugin_name="mokitul"
            destination="/bitnami/moodle/local/$plugin_name"
          elif [[ "$repo_name" == *"block"* ]]; then
            # Block plugins should be in /blocks/<blockname>/
            type="block"
            plugin_name=$(echo "$repo_name" | sed 's/mokitul-block-//g')
            destination="/bitnami/moodle/blocks/mokitul"
          elif [[ "$repo_name" == *"activity"* ]]; then
            # Activity plugins should be in /mod/<modname>/
            type="mod"
            plugin_name=$(echo "$repo_name" | sed 's/mokitul-activity-//g')
            destination="/bitnami/moodle/mod/mokitul"
          elif [[ "$repo_name" == *"local"* ]]; then
            # Local plugins should be in /local/<localname>/
            type="local"
            plugin_name=$(echo "$repo_name" | sed 's/mokitul-local-//g')
            destination="/bitnami/moodle/local/$plugin_name"
          else
            # Default to local if type is unknown
            type="local"
            plugin_name=$(echo "$repo_name" | sed 's/mokitul-//g')
            destination="/bitnami/moodle/local/$plugin_name"
          fi
          
          echo "$destination $type $plugin_name"
        }

        # Iterate over the plugins and copy them to the correct directories
        for repo in {{range .plugin_repos}}{{.}} {{end}}; do
          if [ -d "$repo" ]; then
            repo_name=$(basename "$repo")
            read -r destination type plugin_name < <(determine_destination_and_name "$repo_name")
            
            echo "Copying $repo_name to $destination (plugin type: $type, name: $plugin_name)"
            
            # Create destination directory if it doesn't exist
            docker exec {{.moodle_container_id}} mkdir -p "$destination"
            
            # Copy files to temporary directory first
            docker exec {{.moodle_container_id}} mkdir -p /tmp/plugin-temp
            docker cp "$repo"/. {{.moodle_container_id}}:/tmp/plugin-temp/
            
            # Move files to correct destination
            docker exec {{.moodle_container_id}} sh -c "cp -r /tmp/plugin-temp/* $destination/"
            docker exec {{.moodle_container_id}} sh -c "rm -rf /tmp/plugin-temp"
            
            # Verify version.php exists in the plugin directory
            docker exec {{.moodle_container_id}} sh -c "if [ ! -f $destination/version.php ]; then echo 'WARNING: version.php not found in $destination'; fi"
            
            # Debug - list files in the plugin directory
            echo "Files in $destination:"
            docker exec {{.moodle_container_id}} ls -la "$destination"
          else
            echo "Directory $repo does not exist. Clone it first using 'task clone:get-plugins'."
            exit 1
          fi
        done
        
        echo "All plugins have been copied into the Moodle container."
        
        # Debug - Check all plugin directories
        echo "Listing plugin directories:"
        docker exec {{.moodle_container_id}} sh -c "ls -la /bitnami/moodle/blocks/"
        docker exec {{.moodle_container_id}} sh -c "ls -la /bitnami/moodle/mod/"
        docker exec {{.moodle_container_id}} sh -c "ls -la /bitnami/moodle/local/"

  install-plugins:
  desc: Install all MoKITUL plugins into Moodle
  vars:
    moodle_container_id:
      sh: docker ps --filter "ancestor=bitnami/moodle" -q
  cmds:
    - |
      echo "Installing plugins into Moodle..."
      
      # Fix permissions for both moodle and moodledata directories
      echo "Setting correct permissions..."
      docker exec {{.moodle_container_id}} sh -c "chmod -R 755 /bitnami/moodle && chown -R daemon:daemon /bitnami/moodle"
      docker exec {{.moodle_container_id}} sh -c "chmod -R 777 /bitnami/moodledata && chown -R daemon:daemon /bitnami/moodledata"
      
      # Create cache directory with correct permissions if it doesn't exist
      docker exec {{.moodle_container_id}} sh -c "mkdir -p /bitnami/moodledata/cache && chmod -R 777 /bitnami/moodledata/cache"
      
      # Enable debugging in Moodle config
      echo "Enabling debug mode in Moodle config..."
      docker exec {{.moodle_container_id}} sh -c 'grep -q "debugging" /bitnami/moodle/config.php || sed -i "/require_once/i \$CFG->debug = E_ALL;\n\$CFG->debugdisplay = true;" /bitnami/moodle/config.php'
      
      # Clear Moodle caches
      echo "Clearing Moodle caches..."
      docker exec {{.moodle_container_id}} sh -c "php /bitnami/moodle/admin/cli/purge_caches.php"
      
      # Debug - Run plugin checks
      echo "Checking Moodle plugins..."
      docker exec {{.moodle_container_id}} sh -c "php /bitnami/moodle/admin/cli/check_database_schema.php"
      
      # Trigger Moodle upgrade to recognize all plugins
      echo "Triggering Moodle upgrade..."
      docker exec {{.moodle_container_id}} sh -c "cd /bitnami/moodle && php admin/cli/upgrade.php --non-interactive"
      
      # Check plugin installation status
      echo "Checking installed plugins:"
      docker exec {{.moodle_container_id}} sh -c "php /bitnami/moodle/admin/cli/list_plugins.php"
      
      echo "Moodle upgrade completed. All plugins have been installed."

  install:
    desc: Copy and install all MoKITUL plugins into Moodle
    cmds:
      - task: copy-plugins
      - task: install-plugins
